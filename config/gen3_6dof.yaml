# Arm configuration parameters
adaConf:
  default_urdf: package://kortex_description/robots/gen3_6dof_vision.urdf
  default_srdf: package://kortex_description/robots/gen3_6dof.srdf
  default_accel_lim: 
    aquisition: 2.0
    transfer: 1.0
  default_vel_lim: 
    acquisition: 0.7
    transfer: 0.35
  end_effector: robotiq_arg2f_base_link
  arm: [base_link, bracelet_link]
  hand_base: end_effector_link
  named_configs: package://libada/resources/g2_6d_named_configs.yaml  
  arm_executors:
    enable_controller_switching: true
    mode_controller: joint_mode_controller
    # Note: type can be TRAJECTOTY / JOINT_COMMAND / TASK_COMMAND / VISUAL_SERVOING
    # Note: executor mode can be different from controller mode, for example joint command position executor and impedance controller
    # Note: type TRAJECTORY does not require mode specification
    # Note: last-controller is default when calling setActiveExecutor(ExecutorType)
    executors:
      - {id: bite_transfer_trajectory_executor, type: TRAJECTORY, mode: EFFORT, controller: towards_mouth_bite_transfer_controller}
      - {id: bite_transfer_visual_servoing_executor, type: VISUAL_SERVOING, mode: EFFORT, mode: controller: effort_controller}
      - {id: bite_transfer_inside_mouth_executor, type: TRAJECTORY, mode: EFFORT, controller: inside_mouth_bite_transfer_controller}
      - {id: bite_acquisition_trajectory_executor, type: TRAJECTORY, mode: VELOCITY, controller: move_until_touch_topic_controller}
  hand_controllers:
    enable_controller_switching: true
    mode_controller: hand_mode_controller
    # Note: type can be TRAJECTOTY / JOINT_COMMAND / TASK_COMMAND / VISUAL_SERVOING
    # Note: executor mode can be different from controller mode, for example joint command position executor and impedance controller
    # Note: last-controller is default when calling setActiveExecutor(ExecutorType)
    executors:
      - {id: forque_pickup_executor, type: JOINT_COMMAND, mode: POSITION, controller: hand_position_controller}

# Publish all joint states -----------------------------------
joint_state_controller:
  type: joint_state_controller/JointStateController
  publish_rate: 50

# whole-arm joint mode controller
joint_mode_controller:
  mode: MODE
  type: pr_ros_controllers/JointModeController
  default: VELOCITY
  joints: [joint_mode]

# whole-arm base velocity controller
velocity_controller:
  mode: VELOCITY
  type: pr_ros_controllers/JointGroupVelocityController
  joints: [joint_1, joint_2, joint_3,
    joint_4, joint_5, joint_6]

# whole-arm base position controller
position_controller:
  mode: POSITION
  type: pr_ros_controllers/JointGroupPositionController
  joints: [joint_1, joint_2, joint_3,
    joint_4, joint_5, joint_6]

# whole-arm base effort controller
effort_controller:
  mode: EFFORT
  type: pr_ros_controllers/JointGroupEffortController
  joints: [joint_1, joint_2, joint_3,
    joint_4, joint_5, joint_6]

# whole-arm base trajectory controller
trajectory_controller:
  mode: TRAJECTORY
  type: velocity_controllers/JointTrajectoryController
  joints: [joint_1, joint_2, joint_3,
    joint_4, joint_5, joint_6]
  constraints:
    stopped_velocity_tolerance: 1.0
    joint_1:
      goal: 0.02
      trajectory: 10.0
    joint_2:
      goal: 0.02
      trajectory: 10.0
    joint_3:
      goal: 0.02
      trajectory: 10.0
    joint_4:
      goal: 0.02
      trajectory: 10.0
    joint_5:
      goal: 0.02
      trajectory: 10.0
    joint_6:
      goal: 0.02
      trajectory: 10.0
  gains: # Required because we're controlling a velocity interface
    joint_1: {p: 3,  d: 0, i: 0, i_clamp: 1}
    joint_2: {p: 3,  d: 0, i: 0, i_clamp: 1}
    joint_3: {p: 3,  d: 0, i: 0, i_clamp: 1}
    joint_4: {p: 3,  d: 0, i: 0, i_clamp: 1}
    joint_5: {p: 3,  d: 0, i: 0, i_clamp: 1}
    joint_6: {p: 3,  d: 0, i: 0, i_clamp: 1}

# whole-arm base trajectory controller
move_until_touch_topic_controller:
  mode: TRAJECTORY
  type: rewd_controllers/MoveUntilTouchTopicController
  # Forque Sensor
  forcetorque_wrench_name: /forque/forqueSensor
  forcetorque_tare_name: /forque/bias_controller/trigger
  # FingerVision
  # forcetorque_wrench_name: /fingervision/fv_3_l/wrench
  # forcetorque_tare_name: /fingervision/fingerVisionTaring
  sensor_force_limit: 50
  sensor_torque_limit: 5
  joints: [joint_1, joint_2, joint_3,
    joint_4, joint_5, joint_6]
  control_type: velocity
  constraints:
    stopped_velocity_tolerance: 1.0
    joint_1:
      goal: 0.02
      trajectory: 1
    joint_2:
      goal: 0.02
      trajectory: 1
    joint_3:
      goal: 0.02
      trajectory: 1
    joint_4:
      goal: 0.02
      trajectory: 1
    joint_5:
      goal: 0.02
      trajectory: 1
    joint_6:
      goal: 0.02
      trajectory: 1
  gains: # Required because we're controlling a velocity interface
    joint_1: {p: 1.2,  d: 0, i: 0, i_clamp: 1.0}
    joint_2: {p: 1.2,  d: 0, i: 0, i_clamp: 1.0}
    joint_3: {p: 1.2,  d: 0, i: 0, i_clamp: 1.0}
    joint_4: {p: 1.2,  d: 0, i: 0, i_clamp: 1.0}
    joint_5: {p: 1.2,  d: 0, i: 0, i_clamp: 1.0}
    joint_6: {p: 1.2,  d: 0, i: 0, i_clamp: 1.0}

# # whole-arm base trajectory controller
towards_mouth_bite_transfer_controller:
  mode_handle: joint_mode
  is_lazy: NOPE   
  mode: TRAJECTORY
  type: rewd_controllers/MoveUntilTouchTopicController
  # Forque Sensor
  forcetorque_wrench_name: /forque/forqueSensor
  forcetorque_tare_name: /forque/bias_controller/trigger
  # FingerVision
  # forcetorque_wrench_name: /fingervision/fv_3_l/wrench
  # forcetorque_tare_name: /fingervision/fingerVisionTaring
  sensor_force_limit: 50
  sensor_torque_limit: 5
  max_ft_delay: 100
  joints: [joint_1, joint_2, joint_3,
    joint_4, joint_5, joint_6]
  control_type: impedance
  constraints:
    stopped_velocity_tolerance: 1.0
    joint_1:
      goal: 0.04
      trajectory: 5.0
    joint_2:
      goal: 0.04
      trajectory: 5.0
    joint_3:
      goal: 0.04
      trajectory: 5.0
    joint_4:
      goal: 0.04
      trajectory: 5.0
    joint_5:
      goal: 0.04
      trajectory: 5.0
    joint_6:
      goal: 0.04
      trajectory: 5.0
  gains: # Required because we're controlling an impedance interface
    joint_1: {k: 34,  d: 9}
    joint_2: {k: 33,  d: 9}
    joint_3: {k: 25,  d: 6}
    joint_4: {k: 25,  d: 6}
    joint_5: {k: 34,  d: 15}
    joint_6: {k: 25,  d: 6}

# # whole-arm base trajectory controller
inside_mouth_bite_transfer_controller:
  mode_handle: joint_mode
  is_lazy: OKAY   
  mode: TRAJECTORY
  type: rewd_controllers/MoveUntilTouchTopicController
  # Forque Sensor
  forcetorque_wrench_name: /forque/forqueSensor
  forcetorque_tare_name: /forque/bias_controller/trigger
  # FingerVision
  # forcetorque_wrench_name: /fingervision/fv_3_l/wrench
  # forcetorque_tare_name: /fingervision/fingerVisionTaring
  sensor_force_limit: 50
  sensor_torque_limit: 5
  max_ft_delay: 100
  joints: [joint_1, joint_2, joint_3,
    joint_4, joint_5, joint_6]
  control_type: impedance
  constraints:
    stopped_velocity_tolerance: 1.0
    joint_1:
      goal: 0.04
      trajectory: 5.0
    joint_2:
      goal: 0.04
      trajectory: 5.0
    joint_3:
      goal: 0.04
      trajectory: 5.0
    joint_4:
      goal: 0.04
      trajectory: 5.0
    joint_5:
      goal: 0.04
      trajectory: 5.0
    joint_6:
      goal: 0.04
      trajectory: 5.0
  gains: # Required because we're controlling an impedance interface
    joint_1: {k: 34,  d: 9}
    joint_2: {k: 33,  d: 9}
    joint_3: {k: 25,  d: 6}
    joint_4: {k: 25,  d: 6}
    joint_5: {k: 34,  d: 15}
    joint_6: {k: 25,  d: 6}

# Optional controller that might be useful for testing.
# Should do the same thing as trajectory_controller, but this is 
# the lab's rewd_controllers implementation
rewd_trajectory_controller:
  mode: TRAJECTORY
  type: rewd_controllers/JointTrajectoryController
  joints: [joint_1, joint_2, joint_3,
    joint_4, joint_5, joint_6]
  constraints:
    stopped_velocity_tolerance: 1.0
    joint_1:
      goal: 0.02
      trajectory: 10.0
    joint_2:
      goal: 0.02
      trajectory: 10.0
    joint_3:
      goal: 0.02
      trajectory: 10.0
    joint_4:
      goal: 0.02
      trajectory: 10.0
    joint_5:
      goal: 0.02
      trajectory: 10.0
    joint_6:
      goal: 0.02
      trajectory: 10.0
  gains: # Required because we're controlling a velocity interface
    joint_1: {p: 0.2,  d: 0, i: 0, i_clamp: 1}
    joint_2: {p: 0.2,  d: 0, i: 0, i_clamp: 1}
    joint_3: {p: 0.2,  d: 0, i: 0, i_clamp: 1}
    joint_4: {p: 0.2,  d: 0, i: 0, i_clamp: 1}
    joint_5: {p: 0.2,  d: 0, i: 0, i_clamp: 1}
    joint_6: {p: 0.2,  d: 0, i: 0, i_clamp: 1}
  control_type: velocity

##############################################

# gripper base mode controller
hand_mode_controller:
  mode: MODE
  type: pr_ros_controllers/JointModeController
  default: VELOCITY
  joints: [finger_mode]

# gripper base velocity controller
hand_velocity_controller:
  mode: VELOCITY
  type: pr_ros_controllers/JointGroupVelocityController
  joints: [finger_joint]

# gripper base position controller
hand_position_controller:
  mode: POSITION
  type: pr_ros_controllers/JointGroupPositionController
  joints: [finger_joint]

# gripper base effort controller
hand_effort_controller:
  mode: EFFORT
  type: pr_ros_controllers/JointGroupEffortController
  joints: [finger_joint]

hand_controller:
  mode: TRAJECTORY
  type: velocity_controllers/JointTrajectoryController
  joints: [finger_joint]
  constraints:
    stopped_velocity_tolerance: 1.0
  gains: # Required because we're controlling a velocity interface
    finger_joint: {p: 1,  d: 0, i: 0, i_clamp: 1}

